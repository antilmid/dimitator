{"mappings":";;;;;;;;;;;;ACKe,kDAA2C,EAAK,EAAE;IAM/D,SAAS,SAAS,CAAC,GAAG,IAAI,AAAQ,EAAE;QAClC,IAAI,IAAI,CAAC,MAAM,EACb,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;aAE9C,OAAO,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;KAExC;IACD,OAAO,SAAS,CAAC;CAClB;;ADnBD;AEAO,MAAM,yCAAW;IACtB,GAAG,GAAY,EAAE,CAAC;IAClB,GAAG,GAAY,CAAC,CAAC;IACjB,QAAQ,GAAY,CAAC,CAAC;CACvB;AAOc,kDACb,OAAE,GAAG,GAAG,CAAC,QAAE,GAAG,GAAG,CAAC,aAAE,QAAQ,GAAG,CAAC,GAAe,GAAG,IAAI,yCAAW,EAAE,EACnE;IACA,OAAO,MAAM,CACX,AACE,CAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAI,CAAA,GAAG,GAAG,GAAG,CAAA,GAAI,GAAG,GAAG,QAAQ,CAAC,GAAG,QAAQ,CAAA,CACnE,OAAO,CAAC,AAAC,CAAA,QAAQ,IAAI,CAAC,CAAA,CAAE,QAAQ,EAAE,CAAC,OAAO,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAClE,IAAI,CAAC,CAAC;CACR;;;IFRD,wCAEC,GAFc;IACb,IAAI,EAAE,CAAA,GAAA,wCAAgB,CAAA,CAAC,CAAA,GAAA,wCAAI,CAAA,CAAC;CAC7B","sources":["src/index.ts","src/wrapper/normalizeWrapper.ts","src/features/rand.ts"],"sourcesContent":["import normalizeWrapper from './wrapper/normalizeWrapper';\nimport rand, {RandOptions} from './features/rand';\n\nexport  {\n  RandOptions\n}\n\nexport {\n  rand,\n}\n\nexport default {\n  rand: normalizeWrapper(rand),\n}","/**\n * @description: 函数包裹器，生成一个可变函数\n * @param {array} args\n * @return {*}\n */\nexport default function <T extends (...args: any) => any>(fn: T) {\n  type Params = Parameters<T>;\n  type Return = ReturnType<T>;\n\n  function wrappered(): Return;\n  function wrappered(...args: Params): ()=>Return;\n  function wrappered(...args: Params) {\n    if (args.length) {\n      return fn.bind({}, ...Array.from(args || []));\n    } else {\n      return fn(...Array.from(args || []));\n    }\n  }\n  return wrappered;\n}","export class RandOptions {\n  max?: number = 92; // 最大值\n  min?: number = 0; // 最小值\n  accuracy?: number = 1; // 精度\n}\n\n/**\n * @description: 生成随机数\n * @param {RandOptions} 参数\n * @return {number} \n */\nexport default function rand(\n  { max = 0, min = 0, accuracy = 0 }: RandOptions = new RandOptions()\n) {\n  return Number(\n    (\n      Math.floor(Math.random() * (max - min) + min / accuracy) * accuracy\n    ).toFixed((accuracy || 0).toString().replace(/.*\\./g, \"\").length)\n  ) || 0;\n}\n"],"names":[],"version":3,"file":"main.js.map"}